class Coordinate
  attr_accessor :x
  attr_accessor :y
  attr_accessor :previous
  
  def initialize(x = 0, y = 0)
    @x = x
    @y = y
    @previous = []
    @intersected = false
  end
  
  def ==(other)
    if @x == other.x && @y == other.y
      return true
    else
      return false
    end
  end
  
  def totalBlocks
    return @x.abs + y.abs
  end
  
  def intersectCheck(inputCoord)
    if !@intersected
      if @previous.include? inputCoord
        puts "First Intersect Total Blocks: #{totalBlocks}"
        @intersected = true
      end
    end
  end
  
  def update(angle, distance)
    case angle
    when 0
      distance.times do
        coord = Coordinate.new(@x, @y += 1)
        intersectCheck(coord)
        @previous.push(coord)
      end
    when 90
      distance.times do
        coord = Coordinate.new(@x += 1, @y)
        intersectCheck(coord)
        @previous.push(coord)
      end
    when 180
      distance.times do
        coord = Coordinate.new(@x, @y -= 1)
        intersectCheck(coord)
        @previous.push(coord)
      end
    when 270
      distance.times do
        coord = Coordinate.new(@x -=1 , @y)
        intersectCheck(coord)
        @previous.push(coord)
      end
    end
  end
end

class Angle
  def initialize(currentAngle = 0)
    @currentAngle = currentAngle
  end
  
  def set(angleToAdd = 0)
    @currentAngle = NormalizeAngle(@currentAngle += angleToAdd)
  end
  
  def get
    return @currentAngle
  end
  
  def NormalizeAngle(angle = 0)
    if angle >= 360 
      return angle - 360
    end
    else if angle < 0
      return angle + 360
    else
      return angle
    end
  end
end

input = "R2, L3, R2, R4, L2, L1, R2, R4, R1, L4, L5, R5, R5, R2, R2, R1, L2, L3, L2, L1, R3, L5, R187, R1, R4, L1, R5, L3, L4, R50, L4, R2, R70, L3, L2, R4, R3, R194, L3, L4, L4, L3, L4, R4, R5, L1, L5, L4, R1, L2, R4, L5, L3, R4, L5, L5, R5, R3, R5, L2, L4, R4, L1, R3, R1, L1, L2, R2, R2, L3, R3, R2, R5, R2, R5, L3, R2, L5, R1, R2, R2, L4, L5, L1, L4, R4, R3, R1, R2, L1, L2, R4, R5, L2, R3, L4, L5, L5, L4, R4, L2, R1, R1, L2, L3, L2, R2, L4, R3, R2, L1, L3, L2, L4, L4, R2, L3, L3, R2, L4, L3, R4, R3, L2, L1, L4, R4, R2, L4, L4, L5, L1, R2, L5, L2, L3, R2, L2"

currentPosition = Coordinate.new(0,0)
currentAngle = Angle.new(0)

inputScanned = input.scan(/[RL][0-9]+/)

inputScanned.each do |dir|
  if dir.include? "R"
    currentAngle.set(90)
    number = dir.delete("R").to_i
    currentPosition.update(currentAngle.get, number)
  else dir.include? "L"
    currentAngle.set(-90)
    number = dir.delete("L").to_i
    currentPosition.update(currentAngle.get, number)
  end
end

puts "Total blocks: #{currentPosition.totalBlocks}"

